name: Continuous Integration

on: [push]

jobs:
  static-analysis-checks:
    name: Static analysis Checks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install invoke poetry
        invoke install --skip-install-playwright

    - name: Run linting and formatting
      run: |
        poetry run invoke lint
        poetry run invoke format --check

  type-checking:
    name: Type Checking
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install invoke poetry
        invoke install --skip-install-playwright
        cp example.env .env

    - name: Run type-checking
      run: poetry run invoke typing

  documentation-building:
    name: Documentation Building
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        pip install invoke poetry
        invoke install --skip-install-playwright

    - name: Build the documentation
      # When running the ci locally using act, MkDocs build fails at "make html" with
      # `ValueError: ZoneInfo keys may not be absolute paths, got: /UTC.`
      # It seems to be a timezone related issue that arises from the interaction of the Python
      # packages babel & zoneinfo.
      # setting `TZ=UTC` is a work around here to bypass that error.
      # NOTE: it runs fine when pushing to Github, but unfortunately not in act.
      # link to issue on act repository: https://github.com/nektos/act/issues/1853
      run: TZ=UTC poetry run invoke build-docs

  run-system-tests:
    name: Run System Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: dev
          POSTGRES_PASSWORD: dev_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
            # Allows us to use the same env config used locally by mapping to port to
            # the test runner container.
            - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        sudo apt-get update

        # Project System Dependencies
        sudo apt-get install -y \
          build-essential \
          libffi-dev \
          libpq-dev

        pip install invoke poetry
        invoke install --skip-install-playwright
        cp example.env .env

    - name: Run the system test suite
      run: poetry run invoke test --suite=system

  run-functional-tests:
    name: Run Functional Test Suite
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: dev
          POSTGRES_PASSWORD: dev_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
            # Allows us to use the same env config used locally by mapping to port to
            # the test runner container.
            - 5433:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: |
        sudo apt-get update

        # Project System Dependencies
        sudo apt-get install -y \
          build-essential \
          libffi-dev \
          libpq-dev

        pip install invoke poetry
        invoke install
        cp example.env .env

      # Since there are separate jobs for running system and functional tests independently,
      # and we use different ports to access the database, the following configuration sets up
      # the environment variable to point to the correct database URL.
    - name: Set DATABASE_URL for functional tests
      run: echo "DATABASE_URL=postgres://dev:dev_password@localhost:5433/dev" >> $GITHUB_ENV

    - name: Run the functional test suite
      run: poetry run invoke test --suite=functional

  build-docker-image:
    name: Build Docker Image
    needs: [static-analysis-checks, type-checking, run-system-tests, run-functional-tests]
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: dev
          POSTGRES_PASSWORD: dev_password
          POSTGRES_DB: dev
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
            # Allows us to use the same env config used locally by mapping to port to
            # the test runner container.
            - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: Install dependencies
      run: pip install invoke

    - name: Setup environment variables
      run: |
        cp example.env .env
        echo 'DATABASE_URL=postgres://dev:dev_password@postgres:5432/dev'  >> .env

    - name: Build service Docker Image
      run: invoke build-image

    - name: Run service Docker image
      run: |
        invoke run-image --options '--network {% verbatim %}${{ job.container.network }}{% endverbatim %} --env-file .env' --command check
